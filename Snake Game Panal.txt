package snakeGame;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;

import javax.swing.JPanel;

public class GamePanel extends JPanel implements ActionListener{
	static final int SCREEN_WIDTH = 600;
	static final int SCREEN_HEIGHT = 600;
	static final int UNIT_SIZE = 10;
	static final int GAME_UNITS = (SCREEN_WIDTH*SCREEN_HEIGHT)/UNIT_SIZE;
	static final int DELAY = 100;
	final int x[] = new int[GAME_UNITS];
	final int y[] = new int[GAME_UNITS];
	int bodyparts = 6;
	int applesEten;
	int applex;
	int appley;
	char directoin = 'r';
	boolean running  = false;
	Timer timer;
	Random random;
	
	GamePanel() {
		random = new Random();
		this.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));
		this.setBackground(Color.black);
		this.setFocusable(true);
		this.addKeyListener(null);
		startGame();
	}
	public void startGame() {
		newApple();
		running=true;
		timer = new Timer(DELAY,this);
		timer.start();
	}
	public void paintComponent(Graphics g) { 
		super.paintComponent(g);
		draw(g);
	}
	public void draw(Graphics g) {
		if (running) {
			
		
		for (int i = 0; i < SCREEN_HEIGHT/UNIT_SIZE; i++) {
			g.drawLine(i*UNIT_SIZE, 0, i*UNIT_SIZE, SCREEN_HEIGHT);
			g.drawLine(0,i*UNIT_SIZE , SCREEN_WIDTH, i*UNIT_SIZE);
		}
		g.setColor(Color.RED);
		g.fillOval(applex,appley, UNIT_SIZE, UNIT_SIZE);
		
		for (int i = 0; i < bodyparts; i++) {
			if (i == 0) {
				g.setColor(Color.green);
				g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
			}
		}
	}
		else {
			gameOver(g);
		}
	}
	public void newApple() {
		applex = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE)*UNIT_SIZE);
		appley = random.nextInt((int)(SCREEN_HEIGHT/UNIT_SIZE)*UNIT_SIZE);
	}
	public void move() {
		for (int i = bodyparts; i >0; i--) {
			x[i] = x[i-1];
			y[i] = y[i-1];
		}
		switch (directoin) {
		case 'u':y[0]=y[0]-UNIT_SIZE;
			break;
		case 'D':y[0]=y[0]+UNIT_SIZE;
		    break;
		case 'L':x[0]=x[0]-UNIT_SIZE;
		    break;
		case 'r':x[0]=x[0]+UNIT_SIZE;
	    	break;

		default:
			break;
		}
	}
	
	public void cheakApple() {
		if ((x[0] == applex)&&(y[0] == appley)) {
			bodyparts++;
			applesEten++;
			newApple();
		}
	}
	public void cheakCollisions() {
		//check  if head collides with the body
		for (int i = bodyparts; i > 0; i--) {
			if ((x[0]==x[i])&&(y[0]==y[i])) {
				running=false;
			}
		}
		//check if head touches left border
		if (x[0]<0) {
			running = false;
		}
		//check if head touches right border
		if (x[0]>SCREEN_WIDTH) {
			running = false;
		}
		//check if head touches top border
		if (y[0]<0) {
			running = false;
		}
		//check if head touches bottom border
		if (y[0]>SCREEN_HEIGHT) {
			running = false;
		}
		if (running) {
			timer.start();
		}
	}
	public void gameOver(Graphics g) {
		//game over text
		g.setColor(Color.red);
		g.setFont(new Font("Ink Free",Font.BOLD, 75));
		FontMetrics metrics = getFontMetrics(g.getFont());
		g.drawString("Game over", (SCREEN_WIDTH-metrics.stringWidth("Game over"))/2, SCREEN_HEIGHT/2);
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		if (running) {
			move();
			cheakApple();
			cheakCollisions();
		}
		repaint();
	}
	
	public class Addepter extends KeyAdapter{
		@Override
		public void keyPressed(KeyEvent e) {
			switch (e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				if (directoin != 'r') {
					directoin = 'l';
				}
				break;
			case KeyEvent.VK_RIGHT:
				if (directoin != 'l') {
					directoin = 'r';
				}
				break;
			case KeyEvent.VK_UP:
				if (directoin != 'd') {
					directoin = 'u';
				}
			case KeyEvent.VK_DOWN:
				if (directoin != 'u') {
					directoin = 'd';
				}
				break;
			default:
				break;
			}
		}
	}
}
